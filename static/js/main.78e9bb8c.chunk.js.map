{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Logo/Logo.module.css","components/Notification/Notification.module.css","transitions/slideNotification.module.css","transitions/slideList.module.css","transitions/popFilter.module.css","transitions/slideLogo.module.css","redux/contacts/contactsReducer.js","redux/contacts/contactsType.js","redux/store.js","components/Logo/Logo.jsx","components/Notification/Notification.jsx","components/ContactForm/ContactForm.jsx","redux/contacts/contactsActions.js","components/ContactForm/ContactFormContainer.js","components/ContactList/ContactList.jsx","components/ContactList/ContactListContainer.js","components/Filter/Filter.jsx","components/Filter/FilterContainer.js","components/App/App.jsx","components/App/AppContainer.js","index.js"],"names":["module","exports","contactReducer","createReducer","contacts","filter","state","action","payload","contact","id","store","configureStore","reducer","contactsReducer","Logo","className","styles","h1","Notification","Container","ContactForm","name","number","contactExist","handleChange","event","target","value","setState","replace","handleSubmit","preventDefault","props","saveContact","matchedContact","some","toLowerCase","setTimeout","shortid","generate","resetState","prevProps","prevState","this","CSSTransition","in","timeout","classNames","slideNotification","unmountOnExit","Form","onSubmit","Label","Input","type","onChange","Button","Component","createAction","deleteContact","updateFilter","connect","dispatch","ContactList","filteredContacts","includes","TransitionGroup","component","Ul","map","key","slideList","Li","onClick","Filter","handleInputChange","length","popFilter","App","mounted","persistedContacts","JSON","parse","localStorage","getItem","setItem","stringify","slideLogo","ContactFormContainer","FilterContainer","ContactListContainer","actions","ReactDOM","render","AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.78e9bb8c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__1det0\",\"Label\":\"ContactForm_Label__2nocv\",\"Input\":\"ContactForm_Input__30eBu\",\"Button\":\"ContactForm_Button__2Gx8H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"ContactList_Button__3qXeU\",\"Li\":\"ContactList_Li__1Re2c\",\"Ul\":\"ContactList_Ul__1Wnp4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Filter_Form__nCOjU\",\"Label\":\"Filter_Label__yLG67\",\"Input\":\"Filter_Input__1rzu_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h1\":\"Logo_h1__13RS7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Notification_Container__2b61f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideNotification_enter__2BTI0\",\"enterActive\":\"slideNotification_enterActive__142Ja\",\"exit\":\"slideNotification_exit__1hR-g\",\"exitActive\":\"slideNotification_exitActive__3sadj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideList_enter__2L4C6\",\"enterActive\":\"slideList_enterActive__3rfkj\",\"exit\":\"slideList_exit__2DYNv\",\"exitActive\":\"slideList_exitActive__2PXho\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"popFilter_enter__1Rv5d\",\"enterActive\":\"popFilter_enterActive__37wFS\",\"exit\":\"popFilter_exit__-LIEz\",\"exitActive\":\"popFilter_exitActive__3qq1K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideLogo_enter__3zwB2\",\"enterActive\":\"slideLogo_enterActive__3Zva8\"};","import * as ActionType from './contactsType'; // Импортирую Обьект с типами экшинов\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n/**\r\n * Создаю обьект state который будет по умолчанию\r\n */\r\nconst defaultState = {\r\n  contacts: [],\r\n  filter: '',\r\n};\r\n\r\nconst contactReducer = createReducer(defaultState, {\r\n  [ActionType.SAVECONTACT]: (state, action) => {\r\n    return {\r\n      ...state,\r\n      contacts: [...state.contacts, action.payload],\r\n    };\r\n  },\r\n  [ActionType.DELETECONTACT]: (state, action) => ({\r\n    ...state,\r\n    contacts: state.contacts.filter(contact => contact.id !== action.payload),\r\n  }),\r\n  [ActionType.UPDATEFILTER]: (state, action) => ({\r\n    ...state,\r\n    filter: action.payload,\r\n  }),\r\n});\r\n\r\nexport default contactReducer;\r\n// const appSlice = createSlice({\r\n//   name: 'app',\r\n//   initialState: defaultState,\r\n//   reducers: {\r\n//     saveContact(state, { type, payload }) {\r\n//       if (\r\n//         state.contacts.some(\r\n//           contact =>\r\n//             contact.name.toLowerCase() === payload.contact.name.toLowerCase(),\r\n//         )\r\n//       ) {\r\n//         return { ...state, contactExist: true };\r\n//       }\r\n//       return {\r\n//         ...state,\r\n//         contactExist: false,\r\n//         contacts: [...state.contacts, payload.contact],\r\n//       };\r\n//     },\r\n//     deleteContact(state, { type, payload }) {\r\n//       return {\r\n//         ...state,\r\n//         contacts: state.contacts.filter(contact => contact.id !== payload.id),\r\n//       };\r\n//     },\r\n//     updateFilter(state, { type, payload }) {\r\n//       return {\r\n//         ...state,\r\n//         filter: payload.filter,\r\n//       };\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export default appSlice;\r\n// Without Redux toolkit\r\n// /**\r\n//  * Создаю редьюсер, передаю обькт defaultState, и action который деструктуризирую\r\n//  */\r\n// const appReducer = (state = defaultState, { type, payload }) => {\r\n//   /**\r\n//    * Значение выражения - строка или число, которое сравнивается со всеми значениями case.\r\n//    * Если тип SAVECONTACT, тогда выполнится код дальше.\r\n//    * Если совпадения не произошло, управление передается default\r\n//    * Редьюсер возвращает новый обьект состояния\r\n//    */\r\n//   switch (type) {\r\n//     case ActionType.SAVECONTACT:\r\n//       if (\r\n//         state.contacts.some(\r\n//           contact =>\r\n//             contact.name.toLowerCase() === payload.contact.name.toLowerCase(),\r\n//         )\r\n//       ) {\r\n//         return { ...state, contactExist: true };\r\n//       }\r\n//       return {\r\n//         ...state,\r\n//         contactExist: false,\r\n//         contacts: [...state.contacts, payload.contact],\r\n//       };\r\n\r\n//     case ActionType.DELETECONTACT:\r\n//       return {\r\n//         ...state,\r\n//         contacts: state.contacts.filter(contact => contact.id !== payload.id),\r\n//       };\r\n\r\n//     case ActionType.UPDATEFILTER:\r\n//       return {\r\n//         ...state,\r\n//         filter: payload.filter,\r\n//       };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default appReducer;\r\n","export const SAVECONTACT = 'contacts/SAVECONTACT';\r\nexport const DELETECONTACT = 'contacts/DELETECONTACT';\r\nexport const UPDATEFILTER = 'contacts/UPDATEFILTER';\r\n\r\n// export const ActionType = {\r\n//   SAVECONTACT: 'SAVECONTACT',\r\n//   DELETECONTACT: 'DELETECONTACT',\r\n//   UPDATEFILTER: 'UPDATEFILTER',\r\n// };\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n// import { createStore } from 'redux'; // Импортирую createStore из redux\r\n// import { devToolsEnhancer } from 'redux-devtools-extension'; // Импортирую для плагина в Браузере\r\nimport contactsReducer from './contacts/contactsReducer'; // Импортирую функцию reducer которая возвращает обьект хранилища\r\n\r\nconst store = configureStore({\r\n  reducer: contactsReducer,\r\n});\r\n\r\n// without Redux toolkit\r\n// const store = createStore(appReducer, devToolsEnhancer()); // Создаю хранилище, передаю appReducer, devToolsEnchancer\r\n\r\nexport default store; // експортирую хранилище чтобы передать компоненту\r\n","import React from 'react';\r\nimport styles from './Logo.module.css';\r\n\r\nconst Logo = () => <h1 className={styles.h1}>Phonebook</h1>;\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport styles from '../Notification/Notification.module.css';\r\n\r\nconst Notification = () => (\r\n  <div className={styles.Container}>Contact already exist!</div>\r\n);\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Notification from '../Notification/Notification';\r\nimport slideNotification from '../../transitions/slideNotification.module.css';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../ContactForm/ContactForm.module.css';\r\n\r\nexport default class ContactForm extends Component {\r\n  static propTypes = {\r\n    saveContact: PropTypes.func.isRequired,\r\n    contacts: PropTypes.array.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    contactExist: false,\r\n  };\r\n\r\n  handleChange = event => {\r\n    let { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: name === 'number' ? value.replace(/[^\\-\\d]/g, '') : value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { saveContact, contacts } = this.props;\r\n\r\n    const matchedContact = contacts.some(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n\r\n    if (name && number) {\r\n      if (matchedContact) {\r\n        this.setState({ contactExist: true }, () =>\r\n          setTimeout(() => this.setState({ contactExist: false }), 3000),\r\n        );\r\n      } else {\r\n        saveContact({ ...this.state, id: shortid.generate() });\r\n        this.resetState();\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { contactExist } = this.state;\r\n\r\n    if (prevState.contactExist !== contactExist) {\r\n      setTimeout(() => this.resetState(), 3000);\r\n    }\r\n  }\r\n\r\n  resetState = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n      contactExist: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, contactExist } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <CSSTransition\r\n          in={contactExist}\r\n          timeout={250}\r\n          classNames={slideNotification}\r\n          unmountOnExit\r\n        >\r\n          <Notification />\r\n        </CSSTransition>\r\n\r\n        <form className={styles.Form} onSubmit={this.handleSubmit}>\r\n          <label className={styles.Label}>\r\n            Name\r\n            <input\r\n              className={styles.Input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label className={styles.Label}>\r\n            Number\r\n            <input\r\n              className={styles.Input}\r\n              type=\"text\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button className={styles.Button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as ActionType from './contactsType';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const saveContact = createAction(ActionType.SAVECONTACT);\r\nexport const deleteContact = createAction(ActionType.DELETECONTACT);\r\nexport const updateFilter = createAction(ActionType.UPDATEFILTER);\r\n\r\n// Without Redux toolkit\r\n// export const saveContact = contact => ({\r\n//   type: ActionType.SAVECONTACT,\r\n//   payload: {\r\n//     contact,\r\n//   },\r\n// });\r\n\r\n// export const deleteContact = id => ({\r\n//   type: ActionType.DELETECONTACT,\r\n//   payload: {\r\n//     id,\r\n//   },\r\n// });\r\n\r\n// export const updateFilter = filter => ({\r\n//   type: ActionType.UPDATEFILTER,\r\n//   payload: {\r\n//     filter,\r\n//   },\r\n// });\r\n","import { connect } from 'react-redux';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport { saveContact } from '../../redux/contacts/contactsActions';\r\n\r\nconst mapStateToProps = store => ({\r\n  contacts: store.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  saveContact: contact => dispatch(saveContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../ContactList/ContactList.module.css';\r\nimport slideList from '../../transitions/slideList.module.css';\r\n\r\nexport default class ContactList extends Component {\r\n  static propTypes = {\r\n    filter: PropTypes.string.isRequired,\r\n    deleteContact: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      }).isRequired,\r\n    ).isRequired,\r\n  };\r\n\r\n  render() {\r\n    const { contacts, deleteContact, filter } = this.props;\r\n    const filteredContacts = contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n\r\n    return (\r\n      <TransitionGroup component=\"ul\" className={styles.Ul}>\r\n        {filteredContacts.map(({ id, name, number }) => (\r\n          <CSSTransition\r\n            key={id}\r\n            timeout={250}\r\n            unmountOnExit\r\n            classNames={slideList}\r\n          >\r\n            <li className={styles.Li}>\r\n              <span>{name}</span>\r\n              <span>{number}</span>\r\n              <button\r\n                className={styles.Button}\r\n                onClick={() => deleteContact(id)}\r\n              >\r\n                &#10006;\r\n              </button>\r\n            </li>\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    );\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport ContactList from './ContactList';\r\nimport { deleteContact } from '../../redux/contacts/contactsActions';\r\n\r\nconst mapStateToProps = store => ({\r\n  contacts: store.contacts,\r\n  filter: store.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport styles from '../Filter/Filter.module.css';\r\nimport popFilter from '../../transitions/popFilter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Filter extends Component {\r\n  static propTypes = {\r\n    updateFilter: PropTypes.func.isRequired,\r\n    contacts: PropTypes.array.isRequired,\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { value } = event.target;\r\n    const { updateFilter } = this.props;\r\n\r\n    updateFilter(value);\r\n  };\r\n\r\n  render() {\r\n    const { contacts } = this.props;\r\n\r\n    return (\r\n      <CSSTransition\r\n        in={contacts.length >= 2}\r\n        timeout={250}\r\n        classNames={popFilter}\r\n        unmountOnExit\r\n      >\r\n        <form className={styles.Form}>\r\n          <label className={styles.Label}>Find contacts by name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            onChange={this.handleInputChange}\r\n            className={styles.Input}\r\n          />\r\n        </form>\r\n      </CSSTransition>\r\n    );\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport Filter from './Filter';\r\nimport { updateFilter } from '../../redux/contacts/contactsActions';\r\n\r\nconst mapStateToProps = store => ({\r\n  contacts: store.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateFilter: filter => dispatch(updateFilter(filter)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Logo from '../Logo/Logo';\r\nimport ContactFormContainer from '../ContactForm/ContactFormContainer';\r\nimport ContactListContainer from '../ContactList/ContactListContainer';\r\nimport FilterContainer from '../Filter/FilterContainer';\r\nimport PropTypes from 'prop-types';\r\nimport slideLogo from '../../transitions/slideLogo.module.css';\r\n\r\nexport default class App extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    saveContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    mounted: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { saveContact } = this.props;\r\n    const persistedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n\r\n    if (persistedContacts) {\r\n      persistedContacts.map(contact => saveContact(contact));\r\n    }\r\n\r\n    this.setState({ mounted: true });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { contacts } = this.props;\r\n\r\n    if (prevProps.contacts !== contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(contacts));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { mounted } = this.state;\r\n    const { contacts } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <CSSTransition\r\n          in={mounted}\r\n          timeout={500}\r\n          classNames={slideLogo}\r\n          unmountOnExit\r\n        >\r\n          <Logo />\r\n        </CSSTransition>\r\n\r\n        <ContactFormContainer />\r\n        {contacts.length >= 2 && <FilterContainer />}\r\n        {!!contacts.length && <ContactListContainer />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport App from './App';\r\nimport * as actions from '../../redux/contacts/contactsActions';\r\n\r\nconst mapStateToProps = store => ({\r\n  contacts: store.contacts,\r\n  filter: store.filter,\r\n  contactExist: store.contactExist,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateFilter: filter => dispatch(actions.updateFilter(filter)),\r\n  saveContact: contact => dispatch(actions.saveContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport AppContainer from './components/App/AppContainer';\nimport '../src/index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}